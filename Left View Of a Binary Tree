vector<int> getLeftView(TreeNode<int>* root) {
    // Approach: Level order Traversal
    // and concider only the first node's value and
    // discard the remaining nodes in a perticular level.
    // Time Complexity: O(N)
    // Space Complexity: O(N)
    vector<int> ans;
    if(root == NULL) return ans;
    // Level Order Traversar
    queue<TreeNode<int>*> q;
    q.push(root);
    while(!q.empty()){
        int n = q.size();
        ans.push_back(q.front()->data);
        while(n--){
            TreeNode<int>* curr = q.front();
            q.pop();
            // store in reversed order to get the last node as the first node.
            if(curr->left != NULL) q.push(curr->left);
            if(curr->right != NULL) q.push(curr->right);
        }
    }
    return ans; 
}
